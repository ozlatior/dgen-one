=================
class Environment
=================

**Base class:** Object

Environment class

The environment class puts everything together so the package is easy to integrate in applications


Constructor (settings)
======================

Constructor

* `settings`: settings object, contains specific settings to use instead of defaults


Member methods
==============

This class defines the following member methods


Environment.prototype.setBasePath (path)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Set base (project) path. All relative paths will use this

* `path`: string, new base path


Environment.prototype.addCodeUnitByPath (path, name, description)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Add code unit by file path relative to project path

* `path`: string, file path relative to project path
* `name`: string, optional (name for this unit)
* `description`: string, optional (description for this unit)


Environment.prototype.addCodeUnit (content, path, name, description)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Add code unit by file path and content

* `content`: string, content of the code unit
* `path`: string, file path relative to project path
* `name`: string, optional, name for this unit
* `description`: string, optional, description for this unit


Environment.prototype.setProjectMeta (meta)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Set project meta

* `meta`: object or string, object containing project meta key-value pairs:
   * `name`: string, project name
   * `author`: string, project author
   * `copyright`: string, copyright information (will be autogenerated if missing)
   * `version`: string, project release version


Environment.prototype.fullPath (path)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Join project base path with a given path

* `path`: string, path relative to base path

Returns: string, full path corresponding to the given path


Environment.prototype.isFileFiltered (path)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Check if a file should be filtered out according to the filter rules

* `path`: string, path to check

Returns: boolean, true if path should be excluded


Environment.prototype.isPathFiltered (path)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Check if a path should be filtered out according to the filter rules

* `path`: string, path to check

Returns: boolean, true if path should be excluded


Environment.prototype._autoloadCodeUnits (path, recursive)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Internal autoload code units function, called by `autoloadCodeUnits`

* `path`: string, project base path - this will be set as base path in the Environment if not provided, the currently
  set path is used as base path
* `recursive`: boolean, if true directories will be read recursively


Environment.prototype.autoloadCodeUnits (path, recursive)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Automatically add all code units from project base path

* `path`: string, project base path - this will be set as base path in the Environment if not provided, the currently
  set path is used as base path
* `recursive`: boolean, if true directories will be read recursively


Environment.prototype.autoloadProjectFiles (path, recursive, settings)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Automatically load all project files from project base path

Loads all code unit files, metadata and intro / ending sections from project dir

* `path`: string, project base path - this will be set as base path in the Environment if not provided, the currently
  set path is used as base path


Environment.prototype.generateObjectsDocumentation (settings)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Generate objects documentation

* `settings`: settings object, this will be passed to the generator to replace any defaults

Returns: array of objects containing paths and content for file export


Environment.prototype.generateFilesDocumentation (settings)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Generate files documentation

* `settings`: settings object, this will be passed to the generator to replace any defaults

Returns: array of objects containing paths and content for file export


Environment.prototype.outputContent (path, content, settings)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Output content to given path

* `path`: string, path to write to (directories will be created if missing)
* `content`: array of objects, content to output:
   * `path`: string, relative path to the file
   * `content`: array of strings, file content as rows
* `settings`: settings object, this wll be passed to the generator to replace any defaults


Environment.prototype.outputObjectsDocumentation (path, settings)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Output objects documentation to given path

* `path`: string, path to write to (directories will be created if missing)
* `settings`: settings object, this wll be passed to the generator to replace any defaults


Environment.prototype.outputFilesDocumentation (path, settings)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Output files documentation to given path

* `path`: string, path to write to (directories will be created if missing)
* `settings`: settings object, this wll be passed to the generator to replace any defaults